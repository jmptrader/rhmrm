
RHMRM - RISCy Handmaid Multistack Register Machine Specification
Version 0.2.1


##### SUMMARY ##############################################################

+ 16 bit words
+ 32 general registers
+ 8  control registers
+ 0x10000 words of memory (131072 octets)
+ little-endian octets
+ big-endian words


##### REGISTERS ############################################################

Conventional register purposes:

 ID      | DESCRIPTION         | NAME  | SAVER
---------+---------------------+-------+-------
 r0      | always zero         | zr    | n/a

 r1        return address        ra      caller
 r2-r9     saved registers       s0-s7   callee
 r10-r17   temporary registers   t0-t7   caller
 r18-r21   return values         v0-v3   caller
 r22-r29   function arguments    a0-a7   caller
 r30       frame pointer         fp      callee
 r31       stack pointer         sp      callee

 c0        program counter       pc      callee
 c1        extra                 ex      caller
 c2-c3     -- reserved --        --      n/a
 c4        interrupt address     ia      callee
 c5        interrupt message     im      callee
 c6        interrupt return      ir      callee
 c7        flags                 fl      callee

# C0 - PC
Points to the next instruction.

# C1 - EX
Set by most arithmeic and logical instructions, in most cases contains
higher 16 bits of the result.

# C4 - IA
Points to the interrupt handler.

# C5 - IM
Contains current interrupt message.

# C6 - IR
Contains return address for interrupt handler.

# C7 - FL [IH-- ---- ---- ---S]
Contains execution flags:
+ I - external interrupts are ignored if set.
+ H - set on hardware interrupt.
+ S - supervisor mode enabled if set.


##### INSTRUCTION FORMATS ##################################################

RHMRM has two basic instruction formats, determined by bits 4 and 5 LSB:

  BITS   NAME  DESCRIPTION
  01,1?  ORD   Ordinary two-operand instruction, with first operand residing
               in bits 10-6 of the instruction, and the second in bits 15-11.
  11     UNA   Unary, one-operand instruction, with operand residing in
               10 most significant bits of the instruction.

There is also following special opcodes, modifying the way instruction is
processed:

  HEX  NAME  DESCRIPTION
  00   IMP   Extends ORD, effectively treating first operand as subopcode,
             second as a first, and the next word as a second operand.

##### INSTRUCTIONS #########################################################


### ORD - Ordinary two-operand instructions                              ###

 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
 b  b  b  b  b  a  a  a  a  a  o  o  o  o  o  o

 ID  OPERATOR  EFFECT                                DESCRIPTION
----------------------------------------------------------------------------
 00  imp o, a  o(a, [PC]), PC++                      IMmediate oPerand
 01  mov a, b  Ra := Rb                              MOVe register
 02  mtc k, b  Ck := Rb                              Move To Control
 03  mfc a, k  Ra := Ck                              Move From Control

 04  str a, b  [Ra] := Rb                            SToRe
 05  psh a, b  Ra := Ra - 1, [Ra] := Rb              PuSH
 06  loa a, b  Ra := [Rb]                            LOAd
 07  pop a, b  Ra := [Rb], Rb := Rb + 1              POP
 08  mom a, b  [Ra] := [Rb], Ra++, Rb++              MOve Memory

 09  srl a, b  Ra := PC, PC := Rb                    SubRoutine Link

 10  add a, b  EX:Ra := Ra + Rb                      ADD
 11  adx a, b  EX:Ra := Ra + Rb + EX                 ADd with EX
 12  sub a, b  EX:Ra := Ra - Rb                      SUBtract
 13  sbx a, b  EX:Ra := Ra - Rb + EX                 SUbtract with EX
 14  mul a, b  EX:Ra := Ra * Rb                      MULtiply
 15  mli a, b  EX:Ra := Ra * Rb                      MuLtiply sIgned
 16  div a, b  Ra:EX := Ra / Rb                      DIVide
 17  dvi a, b  Ra:EX := Ra / Rb                      DiVide sIgned
 18  mod a, b  Ra := Ra % Rb                         MODulo
 19  mdi a, b  Ra := Ra % Rb                         MoDulo sIgned
 1a  inc a, b  Ra := Ra + b                          Increment
 1b  gbs a, b  Ra := gbs(b)                          Greatest Bit Set (integer log base 2)

 20  and a, b  Ra := Ra & Rb                         logical AND
 21  ior a, b  Ra := Ra | Rb                         Inclusive OR
 22  xor a, b  Ra := Ra ^ Rb                         eXclusive OR
 23  bic a, b  Ra := Ra &^ Rb                        BIt Clear
 24  shl a, b  EX:Ra := Ra << Rb                     SHift Left
 25  asr a, b  Ra:EX := Ra >> Rb                     Arithmetic Shift Right
 26  shr a, b  Ra:EX := Ra >> Rb                     SHift Right
 27  rol a, b  Ra := (Ra << Rb) & (Ra >> (16 - Rb))  ROtate Left
 28  ror a, b  Ra := (Ra >> Rb) & (Ra << (16 - Rb))  ROtate Right

 29  tst a, b  EX := Ra & Rb                         TeST bits
 2a  teq a, b  EX := Ra ^ Rb                         Test bitwise EQuality
 2b  cmp a, b  EX := Ra - Rb                         CoMPare
 2c  cmn a, b  EX := Ra + Rb                         ComPare Negative


### UNA - One-operand instructions                                       ###

  15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
  c  c  c  c  c  c  c  c  c  c  o  o  o  o  1  1

 ID  OPERATOR  EFFECT                                DESCRIPTION
----------------------------------------------------------------------------
 30  jmp c     PC := PC + c                          Jump Near
 31  jlt c     EX < 0  ? (jpn c)                     Jump if Lesser Than
 32  jle c     EX <= 0 ? (jpn c)                     Jump if Lesser or Equal
 33  jgt c     EX > 0  ? (jpn c)                     Jump if Greater Than
 34  jge c     EX >= 0 ? (jpn c)                     Jump if Geater or Equal
 35  jeq c     EX == 0 ? (jpn c)                     Jump if EQual
 36  jne c     EX != 0 ? (jpn c)                     Jump if Not Equal

 3b  swi c     IR := PC, PC := IA, IM := c, set I, S SoftWare Interrupt
 3c  hwi c     send hardware interrupt c             HardWare Interrupt
 3d  ire c     PC := IR, clear I, if c != 0 clear S  Interrupt REturn


### IMP - Immediate operand instructions                                 ###

  15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | 15 14 13 12 11 10 09...
  a  a  a  a  a  o  o  o  o  o  0  0  0  0  0  0  | b  b  b  b  b  b  b ...

  In the following table ID represents the value of bits 10-06 of an
  instruction:

 ID  OPERATOR      EFFECT                            DESCRIPTION
----------------------------------------------------------------------------
 00  IMP brk -, -  IR := PC, interrupt 0xffff        BReaK
 01  IMP mov a, n  Ra := n                           MOVe immediate value
 02  IMP mtc k, n  Ck := n                           Move To Control

 03  IMP str a, n  [Ra] := n                         SToRe
 04  IMP psh a, n  Ra := Ra - 1, [Ra] := Rb          PuSH

 05  IMP srl a, n  Ra := PC, PC := n                 SubRoutine Link

 08  IMP add a, n  EX:Ra := Ra + n                   ADD
 09  IMP adx a, n  EX:Ra := Ra + n + EX              ADd with EX
 0a  IMP sub a, n  EX:Ra := Ra - n                   SUBtract
 0b  IMP sbx a, n  EX:Ra := Ra - n + EX              SuBtract with EX
 0c  IMP mul a, n  EX:Ra := Ra * n                   MULtiply
 0d  IMP mli a, n  EX:Ra := Ra * n                   MuLtiply sIgned
 0e  IMP div a, n  Ra:EX := Ra / n                   DIVide
 0f  IMP dvi a, n  Ra:EX := Ra / n                   DiVide sIgned
 10  IMP mod a, n  Ra := Ra % n                      MODulo
 11  IMP mdi a, n  Ra := Ra % n                      MoDulo sIgned
 12  IMP inc a, n  Ra := Ra + n                      Increment

 13  IMP and a, n  Ra := Ra & n                      logical AND
 14  IMP ior a, n  Ra := Ra | n                      Inclusive OR
 15  IMP xor a, n  Ra := Ra ^ n                      eXclusive OR
 16  IMP bic a, n  Ra := Ra &^ n                     BIt Clear
 17  IMP shl a, n  EX:Ra := Ra << n                  SHift Left
 18  IMP asr a, n  Ra:EX := Ra >> n                  Arithmetic Shift Right
 19  IMP shr a, n  Ra:EX := Ra >> n                  SHift Right
 1a  IMP rol a, b  Ra := (Ra << n) & (Ra >> (16 - n))  ROtate Left
 1b  IMP ror a, b  Ra := (Ra >> n) & (Ra << (16 - n))  ROtate Right

 1c  IMP tst a, b  EX := Ra & n                      TeST bits
 1d  IMP teq a, b  EX := Ra ^ n                      Test bitwise EQuality
 1e  IMP cmp a, b  EX := Ra - n                      CoMPare
 1f  IMP cmn a, b  EX := Ra + n                      ComPare Negative


* DIV and DVI set Ra to 0xffff and -1 respectively when divisor equals zero.
MOD and MDI set Ra to Rb when divisor equals zero.

* k in MTC and MFC instructions is a 5 bit field consisting of register
index in bits [2,0] and access mode in bits [4,3], which can one of:
+ 00 - SET,
+ 01 - AND,
+ 10 - IOR,
+ 11 - XOR.

* When not in supervisor mode, MTC and HWI instructions will be ignored.

############################################################################

# Example

;;;; Startup
    imp mov a0, 9
    imp srl ra, fib
        hwi 9

;;;; Fibonacci function
:fib    mov v0, zr
        mov t0, zr
    imp mov v1, 1
        cmp a0, zr
        jne _ret
:_loop  mov t0, v0
        add t0, v1
        mov v0, v1
        mov v1, t0
        inc a0, -1
        cmp a0, zr
        jgt _loop
:_ret   srl zr, ra
